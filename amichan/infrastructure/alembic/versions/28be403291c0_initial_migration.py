"""Initial migration

Revision ID: 28be403291c0
Revises: 
Create Date: 2024-12-01 14:48:35.939357

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "28be403291c0"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("admins")
    op.drop_table("role")
    op.drop_table("tag")
    op.drop_table("ban_list")
    op.drop_table("file")
    op.alter_column("thread", "title", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("thread", "tag_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("thread", "nickname", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "thread",
        "content",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        nullable=False,
    )
    op.drop_constraint("thread_tag_id_fkey", "thread", type_="foreignkey")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key("thread_tag_id_fkey", "thread", "tag", ["tag_id"], ["id"])
    op.alter_column(
        "thread",
        "content",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        nullable=True,
    )
    op.alter_column("thread", "nickname", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("thread", "tag_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("thread", "title", existing_type=sa.VARCHAR(), nullable=False)
    op.create_table(
        "file",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("thread_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("file_path", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("file_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["thread_id"], ["thread.id"], name="file_thread_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="file_pkey"),
    )
    op.create_table(
        "ban_list",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("reason", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "banned_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="ban_list_pkey"),
        sa.UniqueConstraint("email", name="ban_list_email_key"),
    )
    op.create_table(
        "tag",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("tag", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="tag_pkey"),
        sa.UniqueConstraint("tag", name="tag_tag_key"),
    )
    op.create_table(
        "role",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('role_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("permissions", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="role_pkey"),
        sa.UniqueConstraint("name", name="role_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "admins",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("password_hash", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["role_id"], ["role.id"], name="admins_role_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="admins_pkey"),
        sa.UniqueConstraint("email", name="admins_email_key"),
    )
    # ### end Alembic commands ###
